import java.util.*;

public class CPUScheduler {

    public void SJF(List<Process>ProcessList){

        int currentTime = 0;
        int totalTurnaroundTime = 0;
        int totalWaitingTime = 0 ;

        ProcessList.sort(Comparator.comparingInt(p -> p.BurstTime));

        System.out.println("Schedule:");

        for (Process process : ProcessList) {
            if (currentTime < process.arrivalTime) {
                currentTime = process.arrivalTime;
            }

            process.waitingTime = currentTime - process.arrivalTime;
            totalWaitingTime += process.waitingTime;

            currentTime += process.BurstTime;
            process.turnaroundTime = currentTime - process.arrivalTime;
            totalTurnaroundTime += process.turnaroundTime;

            System.out.println(process + ", WaitingTime: " + process.waitingTime + ", Turnaround Time: " + process.turnaroundTime + '}');
        }

        int numProcesses = ProcessList.size();
        double avgWaitingTime = (double) totalWaitingTime / numProcesses;
        double avgTurnaroundTime = (double) totalTurnaroundTime / numProcesses;

        System.out.println("Avg Waiting Time: " + avgWaitingTime);
        System.out.println("Avg Turnaround Time: " + avgTurnaroundTime);
    }



    public void priorityScheduler(List<Process> processesList, int contextSwitchTime) {

        processesList.sort(Comparator.comparingInt((Process p) -> p.arrivalTime)
                .thenComparingInt(p -> p.PriorityNum));

        int currentTime = 0;
        List<Process> executedProcesses = new ArrayList<>();

        while (!processesList.isEmpty()) {
            Process selectedProcess = null;

            for (Process p : processesList) {
                if (p.arrivalTime <= currentTime) {// if the process arrived
                    if (selectedProcess == null || p.PriorityNum < selectedProcess.PriorityNum) {
                        selectedProcess = p;
                    }
                }
            }

            if (selectedProcess != null) {
                selectedProcess.waitingTime = currentTime - selectedProcess.arrivalTime;
                currentTime += selectedProcess.BurstTime;
                selectedProcess.turnaroundTime = currentTime - selectedProcess.arrivalTime;

                executedProcesses.add(selectedProcess);
                processesList.remove(selectedProcess);

                currentTime += contextSwitchTime;
            } else {
                currentTime++;
            }
        }


        double totalWaitingTime = 0, totalTurnAroundTime = 0;
        for (Process p : executedProcesses) {
            System.out.println("Process "+p.processName + "\t" + "Arrival Time = "+ p.arrivalTime + "\t" +"Brust Time = "+ p.BurstTime + "\t" +
                    "Priority = "+ p.PriorityNum + "\t" +"Waiting Time = "+ p.waitingTime + "\t" + "TurnAround Time = " +p.turnaroundTime);
            totalWaitingTime += p.waitingTime;
            totalTurnAroundTime += p.turnaroundTime;
        }

        // Calculate and print averages
        double averagWaitingTime = totalWaitingTime / executedProcesses.size();
        double averageTurnAroundTime = totalTurnAroundTime / executedProcesses.size();

        System.out.println("\nAverage Waiting Time: " + averagWaitingTime);
        System.out.println("Average Turnaround Time: " + averageTurnAroundTime);


    }




}

